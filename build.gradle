group 'com.boydti.rededit'
version '1.0-SNAPSHOT'

def PISTON="0.5.3-SNAPSHOT"

buildscript {
    repositories {
        mavenCentral()
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        classpath 'org.ajoberstar:grgit:1.7.0'
    }
}

configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    flatDir {dirs 'lib'}
    mavenCentral()
    maven {url "https://mvnrepository.com/artifact/org.apache.commons/commons-pool2"}
    maven {url "https://hub.spigotmc.org/nexus/content/groups/public/"}
    maven {url "https://oss.sonatype.org/content/groups/public/"}
    maven {url "http://maven.sk89q.com/repo/"}
//    maven {url "https://ci.athion.net/job/FastAsyncWorldEdit-Breaking/ws/mvn/" }
    maven {url "https://ci.athion.net/job/PlotSquared-Breaking/ws/mvn/"}
    maven { url 'https://papermc.io/repo/repository/maven-public/' }
    maven { url 'https://jitpack.io' }
    maven { url "https://ci.athion.net/job/FAWE-Piston/ws/" }
    ivy {
        url "https://ci.athion.net/job"
        layout 'pattern', {
            artifact "/[organisation]/[revision]/artifact/[module].[ext]"
        }
    }
    maven { url "https://maven.enginehub.org/repo/" }
}

def urlFile = { url, name ->
    File file = new File("lib/${name}.jar")
    file.parentFile.mkdirs()
    if (!file.exists()) {
        new URL(new URL(url).openConnection().inputStream.getText()).withInputStream { downloadIs ->
            file.withOutputStream { fileOut ->
                fileOut << downloadIs
            }
        }
    }
    files(file.absolutePath)
}

dependencies {
    compile group: 'redis.clients', name: 'jedis', version: '2.9.0'
    compile "com.destroystokyo.paper:paper-api:1.14.4-R0.1-SNAPSHOT"
//    compile 'com.boydti:fawe-api:latest'
//    compile 'com.boydti:fawe-bukkit:latest'
    compile urlFile('https://empcraft.com/download/?url=http://ci.athion.net/view/Everything/job/FastAsyncWorldEdit-pipeline/lastSuccessfulBuild/artifact/worldedit-bukkit/build/libs/&name=FastAsyncWorldEdit&ext=jar', 'FastAsyncWorldEdit')
    compile 'com.github.intellectualsites.plotsquared:PlotSquared-API:latest'
//    compile name: 'FastAsyncWorldEdit'
    compile name: 'Bukkit-Connect'

    compile "FAWE-Piston:core/build/libs/core-${PISTON}:lastSuccessfulBuild@jar"
    compile "FAWE-Piston:core-ap/annotations/build/libs/annotations-${PISTON}:lastSuccessfulBuild@jar"
    compile "FAWE-Piston:core-ap/processor/build/libs/processor-${PISTON}:lastSuccessfulBuild@jar"
    compile "org.enginehub.piston.core-ap:annotations:${PISTON}"
    compile "org.enginehub.piston.core-ap:processor:${PISTON}"
}

def revision = ""
def buildNumber = ""
def semver = ""
def date = ""
ext {
    git = org.ajoberstar.grgit.Grgit.open(file(".git"))
    date = git.head().date.format("yy.MM.dd")
    revision = "-${git.head().abbreviatedId}"
    parents = git.head().parentIds;
    index = 0;  // Offset to mach CI
    int major, minor, patch;
    major = minor = patch = 0;
    for (;parents != null && !parents.isEmpty();index++) {
        int majorCount, minorCount, patchCount;
        patchCount = minor == 0 && major == 0 ? 1 : 0;
        commit = git.getResolve().toCommit(parents.get(0));
        for (String line : commit.fullMessage.tokenize("\n")) {
            switch (line.replaceAll("- ", "").split(" ")[0].toLowerCase()) {
                case "minor":
                case "added":
                case "add":
                case "change":
                case "changed":
                case "changes":
                    if (major == 0) {minorCount = 1; patchCount = 0;}
                    break;
                case "refactor":
                case "remove":
                case "major":
                    patchCount = minorCount = 0;
                    majorCount = 1;
                    break;
            }
        }
        major += majorCount;
        minor += minorCount;
        patch += patchCount;
        parents = commit.getParentIds()
    }
    buildNumber = "-${index}"
    semver = "-${major}.${minor}.${patch}"
}

version = date + revision + buildNumber + semver
if ( project.hasProperty("lzNoVersion") ) { // gradle build -PlzNoVersion
    version = "unknown";
}
description = rootProject.name

processResources {
    from('src/main/resources') {
        include 'plugin.yml'
        expand(
                name: project.name,
                version: project.version
        )
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
shadowJar {
    dependencies {
        include(dependency('org.apache.commons:commons-pool2:2.4.2'))
        include(dependency(group: 'redis.clients', name: 'jedis', version: '2.9.0'))
    }
    relocate('org.apache.commons', 'com.boydti.apache.commons')
    relocate('redis.clients', 'com.boydti.redis.clients')
    archiveName = "${project.name}-${project.version}.jar"
    destinationDir = file 'target'
}
shadowJar.doLast {
    task ->
        ant.checksum file: task.archivePath
}

build.dependsOn(shadowJar);
